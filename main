"""
Recipe Browser v1.10
Author: Ben Barrick
Date: 5/9/24

Description:
A recipe browser that allows users to search and browse through a collection of recipes. you have to enter your own recipes though,
like a digital cook book. 

"""

import tkinter as tk
import tempfile
import subprocess

class AddRecipeModule(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.create_widgets()

    def create_widgets(self):
        # Add recipe form components
        self.title_label = tk.Label(self, text="Recipe Title:")
        self.title_entry = tk.Entry(self)
        self.ingredients_label = tk.Label(self, text="Ingredients:")
        self.ingredients_entry = tk.Text(self, height=5, width=30)
        self.instructions_label = tk.Label(self, text="Instructions:")
        self.instructions_entry = tk.Text(self, height=10, width=30)
        self.cuisine_label = tk.Label(self, text="Cuisine:")
        self.cuisine_entry = tk.Entry(self)
        self.meal_type_label = tk.Label(self, text="Meal Type:")
        self.meal_type_entry = tk.Entry(self)
        self.save_button = tk.Button(self, text="Save Recipe", command=self.save_recipe)

        # Pack components
        self.title_label.pack()
        self.title_entry.pack()
        self.ingredients_label.pack()
        self.ingredients_entry.pack()
        self.instructions_label.pack()
        self.instructions_entry.pack()
        self.cuisine_label.pack()
        self.cuisine_entry.pack()
        self.meal_type_label.pack()
        self.meal_type_entry.pack()
        self.save_button.pack()

    def save_recipe(self):
        # Retrieve input values from entry fields
        title = self.title_entry.get()
        ingredients = self.ingredients_entry.get("1.0", tk.END)
        instructions = self.instructions_entry.get("1.0", tk.END)
        cuisine = self.cuisine_entry.get()
        meal_type = self.meal_type_entry.get()

        # Process the recipe data (e.g., save to a file)
        with open("recipes.txt", "a") as file:
            file.write(f"Title: {title}\n")
            file.write(f"Ingredients: {ingredients}\n")
            file.write(f"Instructions: {instructions}\n")
            file.write(f"Cuisine: {cuisine}\n")
            file.write(f"Meal Type: {meal_type}\n")
            file.write("\n")

        # Show confirmation message
        tk.messagebox.showinfo("Recipe Saved", "The recipe has been saved successfully!")

class ViewRecipeModule(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.create_widgets()

    def create_widgets(self):
        # Text box to display recipes
        self.recipes_text = tk.Text(self, height=20, width=50)
        self.recipes_text.pack()

class SearchRecipeModule(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.configure(bg="#2b2b2b")  # Set background color
        self.create_widgets()

    def create_widgets(self):
        # Search recipe form components with appropriate background and foreground colors
        self.search_label = tk.Label(self, text="Enter Keyword:", bg="#2b2b2b", fg="white")
        self.search_entry = tk.Entry(self, bg="black", fg="white")
        self.search_button = tk.Button(self, text="Search", command=self.search_recipe, bg="#444444", fg="white")

        # Pack search form components
        self.search_label.grid(row=0, column=0, padx=5, pady=5)
        self.search_entry.grid(row=0, column=1, padx=5, pady=5)
        self.search_button.grid(row=0, column=2, padx=5, pady=5)

        # Create text box to display search results
        self.search_results_text = tk.Text(self, height=10, width=50, bg="black", fg="white")
        self.search_results_text.grid(row=1, column=0, columnspan=3, padx=5, pady=5)

    def search_recipe(self):
        # Retrieve the keyword from the search entry
        keyword = self.search_entry.get().lower()

        # Clear existing search results
        self.search_results_text.delete("1.0", tk.END)

        # Read recipes from file and search for keyword
        try:
            with open("recipes.txt", "r") as file:
                recipes = file.readlines()
                for idx, recipe in enumerate(recipes, start=1):
                    if keyword in recipe.lower():
                        # Display recipe in search results text box
                        self.search_results_text.insert(tk.END, f"{idx}. {recipe}")

                        # Bind the click event to open the recipe in a temporary file
                        self.search_results_text.tag_bind(f"tag{idx}", "<Button-1>", lambda event, recipe=recipe: self.open_temp_file(recipe))
                        self.search_results_text.tag_config(f"tag{idx}", foreground="blue", underline=True)
        except FileNotFoundError:
            self.search_results_text.insert(tk.END, "No recipes found.")

    def open_temp_file(self, recipe):
        # Create a temporary file and write the recipe content to it
        with tempfile.NamedTemporaryFile(mode="w", delete=False) as temp_file:
            temp_file.write(recipe)

        # Open the temporary file in the default text editor
        try:
            subprocess.Popen(["notepad", temp_file.name])
        except FileNotFoundError:
            print("Error: Unable to open temporary file. Please ensure Notepad is installed.")

class RecipeBrowserApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Recipe Browser")

        # Initialize the main menu
        self.create_main_menu()

        # Initialize the modules
        self.add_recipe_module = AddRecipeModule(self)
        self.view_recipe_module = ViewRecipeModule(self)
        self.search_recipe_module = SearchRecipeModule(self)

        # Pack the main menu by default
        self.add_recipe_module.pack(fill=tk.BOTH, expand=True)

    def create_main_menu(self):
        # Create main menu frame
        main_menu_frame = tk.Frame(self, bg="#2b2b2b")
        main_menu_frame.pack(side=tk.BOTTOM, fill=tk.X)

        # Create main menu buttons for navigation with appropriate background and foreground colors
        self.add_recipe_button = tk.Button(main_menu_frame, text="Add Recipe", command=self.show_add_recipe, bg="#444444", fg="white")
        self.view_recipe_button = tk.Button(main_menu_frame, text="View Recipes", command=self.show_view_recipe, bg="#444444", fg="white")
        self.search_recipe_button = tk.Button(main_menu_frame, text="Search Recipes", command=self.show_search_recipe, bg="#444444", fg="white")

        # Pack main menu buttons
        self.add_recipe_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.view_recipe_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.search_recipe_button.pack(side=tk.LEFT, padx=5, pady=5)

    def show_add_recipe(self):
        # Show the add recipe module
        self.add_recipe_module.pack(fill=tk.BOTH, expand=True)
        self.view_recipe_module.pack_forget()
        self.search_recipe_module.pack_forget()

    def show_view_recipe(self):
        # Show the view recipe module
        self.add_recipe_module.pack_forget()
        self.view_recipe_module.pack(fill=tk.BOTH, expand=True)
        self.search_recipe_module.pack_forget()

    def show_search_recipe(self):
        # Show the search recipe module
        self.add_recipe_module.pack_forget()
        self.view_recipe_module.pack_forget()
        self.search_recipe_module.pack(fill=tk.BOTH, expand=True)

if __name__ == "__main__":
    app = RecipeBrowserApp()
    app.mainloop()
