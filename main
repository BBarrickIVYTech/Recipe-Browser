import tkinter as tk
from tkinter import messagebox
import os

class AddRecipeModule(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.create_widgets()

    def create_widgets(self):
        # Add recipe form components
        self.title_label = tk.Label(self, text="Recipe Title:")
        self.title_entry = tk.Entry(self)
        self.ingredients_label = tk.Label(self, text="Ingredients:")
        self.ingredients_entry = tk.Text(self, height=5, width=30)
        self.instructions_label = tk.Label(self, text="Instructions:")
        self.instructions_entry = tk.Text(self, height=10, width=30)
        self.cuisine_label = tk.Label(self, text="Cuisine:")
        self.cuisine_entry = tk.Entry(self)
        self.meal_type_label = tk.Label(self, text="Meal Type:")
        self.meal_type_entry = tk.Entry(self)
        self.save_button = tk.Button(self, text="Save Recipe", command=self.save_recipe)
        
        # Pack components
        self.title_label.pack()
        self.title_entry.pack()
        self.ingredients_label.pack()
        self.ingredients_entry.pack()
        self.instructions_label.pack()
        self.instructions_entry.pack()
        self.cuisine_label.pack()
        self.cuisine_entry.pack()
        self.meal_type_label.pack()
        self.meal_type_entry.pack()
        self.save_button.pack()

    def save_recipe(self):
        # Retrieve input values from entry fields
        title = self.title_entry.get()
        ingredients = self.ingredients_entry.get("1.0", tk.END)
        instructions = self.instructions_entry.get("1.0", tk.END)
        cuisine = self.cuisine_entry.get()
        meal_type = self.meal_type_entry.get()
        
        # Format recipe data
        recipe_data = f"Title: {title}\nIngredients:\n{ingredients}\nInstructions:\n{instructions}\nCuisine: {cuisine}\nMeal Type: {meal_type}\n"
        
        # Save recipe to a text file
        with open("recipes.txt", "a") as file:
            # Create the file if it doesn't exist
            if not os.path.exists("recipes.txt"):
                file.write("")

            # Write recipe data to the file
            file.write(recipe_data)
        
        # Notify the user that the recipe has been saved
        messagebox.showinfo("Recipe Saved", "The recipe has been saved successfully!")




class ViewRecipeModule(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.create_widgets()

    def create_widgets(self):
        # Text widget to display recipes
        self.recipes_text = tk.Text(self, height=20, width=50)
        self.recipes_text.pack()

        # Button to refresh recipes
        self.refresh_button = tk.Button(self, text="Refresh", command=self.refresh_recipes)
        self.refresh_button.pack()

        # Initially load recipes
        self.refresh_recipes()

    def refresh_recipes(self):
        # Clear existing recipes
        self.recipes_text.delete("1.0", tk.END)

        # Read recipes from file and display them
        try:
            with open("recipes.txt", "r") as file:
                recipes = file.read()
                self.recipes_text.insert(tk.END, recipes)
        except FileNotFoundError:
            self.recipes_text.insert(tk.END, "No recipes found.")

        
    def view_recipe(self):
        # Retrieve selected recipe from listbox
        selected_index = self.recipe_listbox.curselection()
        if selected_index:
            selected_recipe = self.recipe_listbox.get(selected_index)
            # Placeholder code to display selected recipe
            print("Viewing Recipe:", selected_recipe)
        else:
            print("No recipe selected.")

class SearchRecipeModule(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        
        # Search components
        self.search_label = tk.Label(self, text="Search:")
        self.search_entry = tk.Entry(self)
        self.search_button = tk.Button(self, text="Search", command=self.search_recipe)
        self.results_listbox = tk.Listbox(self, height=10, width=40)
        
        # Placeholder data
        recipes = ["Recipe 1", "Recipe 2", "Recipe 3", "Recipe 4", "Recipe 5"]
        for recipe in recipes:
            self.results_listbox.insert(tk.END, recipe)
        
        # Pack components
        self.search_label.pack()
        self.search_entry.pack()
        self.search_button.pack()
        self.results_listbox.pack()
        
    def search_recipe(self):
        # Clear previous search results
        self.results_listbox.delete(0, tk.END)
        
        # Retrieve search query from entry field
        query = self.search_entry.get()
        
        # Placeholder search functionality (matching recipes containing query)
        # In a real application, you would implement a more sophisticated search mechanism
        recipes = ["Recipe 1", "Recipe 2", "Recipe 3", "Recipe 4", "Recipe 5"]
        for recipe in recipes:
            if query.lower() in recipe.lower():
                self.results_listbox.insert(tk.END, recipe)

class RecipeBrowserApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Recipe Browser")
        
        # Initialize modules
        self.add_recipe_module = AddRecipeModule(self)
        self.view_recipe_module = ViewRecipeModule(self)
        self.search_recipe_module = SearchRecipeModule(self)
        
        # Pack default module
        self.add_recipe_module.pack(fill=tk.BOTH, expand=True)
        
        # Create navigation buttons
        self.create_main_menu()

    def create_main_menu(self):
        # Create main menu buttons for navigation
        self.add_recipe_button = tk.Button(self, text="Add Recipe", command=self.show_add_recipe)
        self.view_recipe_button = tk.Button(self, text="View Recipes", command=self.show_view_recipe)
        self.search_recipe_button = tk.Button(self, text="Search Recipes", command=self.show_search_recipe)
        
        # Pack main menu buttons
        self.add_recipe_button.pack(side=tk.LEFT)
        self.view_recipe_button.pack(side=tk.LEFT)
        self.search_recipe_button.pack(side=tk.LEFT)
        
    def show_add_recipe(self):
        # Show the add recipe module
        self.add_recipe_module.pack(fill=tk.BOTH, expand=True)
        self.view_recipe_module.pack_forget()
        self.search_recipe_module.pack_forget()
        
    def show_view_recipe(self):
        # Show the view recipe module
        self.add_recipe_module.pack_forget()
        self.view_recipe_module.pack(fill=tk.BOTH, expand=True)
        self.search_recipe_module.pack_forget()
        
    def show_search_recipe(self):
        # Show the search recipe module
        self.add_recipe_module.pack_forget()
        self.view_recipe_module.pack_forget()
        self.search_recipe_module.pack(fill=tk.BOTH, expand=True)

if __name__ == "__main__":
    app = RecipeBrowserApp()
    app.mainloop()
